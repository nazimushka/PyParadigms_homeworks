'''
Binary Search
'''

array = [3, 5, 7, 18, 27, 38, 40, 100]

search_num = int(input('Введите искомое число: '))

def bin_search(array, search_num):
    left = 0
    right = len(array) - 1

    while left <= right:
        middle_index = (left + right) // 2
        middle = array[middle_index]

        if search_num == middle:
            return middle_index
        elif search_num < middle:
            right = middle_index - 1
        else:
            left = middle_index + 1

    return -1

result = bin_search(array, search_num)

if result != -1:
    print(f"Число {search_num} найдено в массиве, индекс: {result}")
else:
    print(f"Число {search_num} не найдено в массиве.")


'''
В данной задаче бинарный поиск в отсортированном 
массиве реализован в виде процедуры, которая последовательно выполняет определенные 
шаги и возвращает результат. Процедурная парадигма предоставляет следующие преимущества:

Простота реализации. Бинарный поиск в процедурной парадигме может быть 
реализован с помощью простых конструкций, таких как циклы, условные 
операторы и присваивания. В данной задаче бинарный поиск в отсортированном массиве 
реализован в виде процедуры, которая последовательно выполняет определенные шаги и возвращает результат. 

Эффективность. Процедурная парадигма позволяет реализовать этот алгоритм эффективно и 
без необходимости ввода дополнительных структур данных или сложных механизмов.

Читаемость. Процедурная парадигма обеспечивает последовательное выполнение шагов, 
что делает код более читаемым и понятным. Это особенно важно для такой простой задачи,
где нет необходимости в сложных конструкциях или взаимодействии между компонентами.

Масштабируемость. В данной задаче нет явных требований к масштабируемости или 
повторному использованию кода. Процедурная парадигма хорошо подходит для решения 
относительно небольших задач, где упор делается на простоту и эффективность.
'''